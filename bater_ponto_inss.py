#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Tuple
from dataclasses import dataclass
from contextlib import contextmanager

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    UnexpectedAlertPresentException,
    TimeoutException,
    WebDriverException,
    NoSuchElementException
)
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service


# Configura√ß√µes
@dataclass
class Config:
    URL_LOGIN: str = "https://sisref.inss.gov.br/entrada.php"
    TEMPO_ESPERA_CAPTCHA: int = 6
    HORAS_TRABALHO_MINIMAS: int = 6
    MAX_TENTATIVAS_LOGIN: int = 3
    TIMEOUT_PADRAO: int = 15
    INTERVALO_VERIFICACAO: int = 5  # segundos entre verifica√ß√µes do rel√≥gio
    SAIR_APOS_CALCULAR_HORARIO: bool = True  # Nova op√ß√£o para sair ap√≥s calcular hor√°rio


# Configura√ß√£o de logging
def configurar_logging():
    """Configura o sistema de logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('ponto_inss.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )


class CredenciaisManager:
    """Gerencia credenciais de forma segura"""

    @staticmethod
    def obter_credenciais() -> Tuple[str, str]:
        """Obt√©m credenciais do usu√°rio de forma segura"""
        siape = os.getenv('SIAPE_INSS', "3476995")  # Coloque seu SIAPE aqui se n√£o usar vari√°veis de ambiente
        senha = os.getenv('SENHA_INSS', "gabrielg")  # Coloque sua senha aqui se n√£o usar vari√°veis de ambiente

        if not siape:
            siape = input("Digite seu SIAPE: ").strip()

        if not senha:
            import getpass
            senha = getpass.getpass("Digite sua senha: ").strip()

        if not siape or not senha:
            raise ValueError("SIAPE e senha s√£o obrigat√≥rios")

        return siape, senha


class WebDriverManager:
    """Gerencia o WebDriver com configura√ß√µes otimizadas"""

    @staticmethod
    def criar_driver() -> webdriver.Chrome:
        """Cria e configura o driver do Chrome"""
        chrome_options = Options()
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")

        try:
            driver = webdriver.Chrome(options=chrome_options)
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            return driver
        except WebDriverException as e:
            logging.error(f"Erro ao criar driver: {e}")
            raise


class Rel√≥gioPontoManager:
    """Gerencia o rel√≥gio do ponto e c√°lculos de tempo"""

    def __init__(self):
        self.horario_entrada = None
        self.horario_saida_calculado = None

    def extrair_horario_relogio(self, texto: str) -> Optional[datetime]:
        """Extrai hor√°rio do rel√≥gio no formato HH:MM:SS"""
        try:
            # Extrai apenas a parte do hor√°rio (HH:MM:SS)
            match = re.search(r'(\d{1,2}):(\d{2}):(\d{2})', texto)
            if match:
                horas = int(match.group(1))
                minutos = int(match.group(2))
                segundos = int(match.group(3))

                # Cria um datetime com a data de hoje
                hoje = datetime.now().date()
                horario = datetime.combine(hoje, datetime.min.time().replace(
                    hour=horas, minute=minutos, second=segundos
                ))

                return horario
        except Exception as e:
            logging.error(f"Erro ao extrair hor√°rio do rel√≥gio: {e}")

        return None

    def extrair_horario_campo(self, valor: str) -> Optional[datetime]:
        """Extrai hor√°rio do campo de entrada no formato HH:MM:SS"""
        try:
            if not valor or valor.strip() == "":
                return None

            # Remove espa√ßos e verifica se est√° no formato correto
            valor_limpo = valor.strip()

            # Tenta diferentes formatos
            formatos = ["%H:%M:%S", "%H:%M"]

            for formato in formatos:
                try:
                    hora_obj = datetime.strptime(valor_limpo, formato).time()
                    hoje = datetime.now().date()
                    horario = datetime.combine(hoje, hora_obj)
                    return horario
                except ValueError:
                    continue

            logging.warning(f"Formato de hor√°rio n√£o reconhecido: {valor}")
            return None

        except Exception as e:
            logging.error(f"Erro ao extrair hor√°rio do campo: {e}")
            return None

    def calcular_horario_saida(self, horario_entrada: datetime, horas_trabalho: int = 6) -> datetime:
        """Calcula o hor√°rio de sa√≠da baseado no hor√°rio de entrada"""
        return horario_entrada + timedelta(hours=horas_trabalho)

    def definir_horario_entrada(self, horario_atual: datetime):
        """Define o hor√°rio de entrada e calcula o hor√°rio de sa√≠da"""
        if not self.horario_entrada:
            self.horario_entrada = horario_atual
            self.horario_saida_calculado = self.calcular_horario_saida(self.horario_entrada)

            logging.info(f"üïê Hor√°rio de entrada detectado: {self.horario_entrada.strftime('%H:%M:%S')}")
            logging.info(f"üïï Hor√°rio de sa√≠da calculado: {self.horario_saida_calculado.strftime('%H:%M:%S')}")

    def verificar_se_pode_sair(self, horario_atual: datetime) -> bool:
        """Verifica se j√° pode sair (completou 6 horas)"""
        if not self.horario_saida_calculado:
            return False

        return horario_atual >= self.horario_saida_calculado

    def tempo_restante(self, horario_atual: datetime) -> Optional[timedelta]:
        """Calcula o tempo restante para completar 6 horas"""
        if not self.horario_saida_calculado:
            return None

        if horario_atual >= self.horario_saida_calculado:
            return timedelta(0)

        return self.horario_saida_calculado - horario_atual

    def formatar_tempo_restante(self, tempo: timedelta) -> str:
        """Formata o tempo restante de forma leg√≠vel"""
        if tempo.total_seconds() <= 0:
            return "00:00:00"

        horas = int(tempo.total_seconds() // 3600)
        minutos = int((tempo.total_seconds() % 3600) // 60)
        segundos = int(tempo.total_seconds() % 60)

        return f"{horas:02d}:{minutos:02d}:{segundos:02d}"


class SistemaInss:
    """Classe principal para gerenciar o sistema INSS"""

    def __init__(self, config: Config):
        self.config = config
        self.driver: Optional[webdriver.Chrome] = None
        self.credenciais_manager = CredenciaisManager()
        self.relogio_manager = Rel√≥gioPontoManager()

    @contextmanager
    def gerenciar_driver(self):
        """Context manager para gerenciar o driver"""
        try:
            self.driver = WebDriverManager.criar_driver()
            yield self.driver
        finally:
            if self.driver:
                self.driver.quit()

    def realizar_login(self) -> bool:
        """Realiza login no sistema"""
        siape, senha = self.credenciais_manager.obter_credenciais()

        for tentativa in range(1, self.config.MAX_TENTATIVAS_LOGIN + 1):
            logging.info(f"Tentativa de login {tentativa}/{self.config.MAX_TENTATIVAS_LOGIN}")

            try:
                self.driver.get(self.config.URL_LOGIN)

                # Aguarda a p√°gina carregar
                WebDriverWait(self.driver, self.config.TIMEOUT_PADRAO).until(
                    EC.presence_of_element_located((By.ID, "lSiape"))
                )

                # Preenche credenciais
                campo_siape = self.driver.find_element(By.ID, "lSiape")
                campo_siape.clear()
                campo_siape.send_keys(siape)

                campo_senha = self.driver.find_element(By.ID, "lSenha")
                campo_senha.clear()
                campo_senha.send_keys(senha)

                # Aguarda CAPTCHA
                logging.info(f"‚è≥ Preencha o CAPTCHA manualmente em at√© {self.config.TEMPO_ESPERA_CAPTCHA} segundos...")
                time.sleep(self.config.TEMPO_ESPERA_CAPTCHA)

                # Clica em entrar
                botao_entrar = WebDriverWait(self.driver, 20).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[@id='btn-enviar']"))
                )
                botao_entrar.click()

                # Verifica se login foi bem-sucedido
                WebDriverWait(self.driver, 15).until(EC.url_changes(self.config.URL_LOGIN))

                logging.info("‚úÖ Login realizado com sucesso!")
                return True

            except UnexpectedAlertPresentException:
                logging.warning("‚ö†Ô∏è CAPTCHA n√£o informado ou incorreto!")
                try:
                    alert = self.driver.switch_to.alert
                    logging.info(f"Alerta: {alert.text}")
                    alert.accept()
                except Exception:
                    pass

            except TimeoutException:
                logging.error("‚ùå Tempo esgotado durante login")

            except Exception as e:
                logging.error(f"‚ùå Erro inesperado no login: {e}")
                break

        logging.error("‚ùå Falha no login ap√≥s todas as tentativas")
        return False

    def obter_horario_ponto_entrada(self) -> Optional[datetime]:
        """Obt√©m o hor√°rio de entrada do ponto (quando bateu o ponto)"""
        try:
            # Procura pelo campo de entrada do ponto
            campo_entrada = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, "ent"))
            )

            valor_entrada = campo_entrada.get_attribute("value")
            logging.info(f"üïê Hor√°rio de entrada detectado no campo: {valor_entrada}")

            if valor_entrada:
                horario_entrada = self.relogio_manager.extrair_horario_campo(valor_entrada)
                if horario_entrada:
                    return horario_entrada

        except TimeoutException:
            logging.warning("Campo de entrada do ponto (id='ent') n√£o encontrado")
        except Exception as e:
            logging.error(f"Erro ao obter hor√°rio de entrada: {e}")

        return None

    def obter_horario_relogio(self) -> Optional[datetime]:
        """Obt√©m o hor√°rio atual do rel√≥gio do sistema com m√∫ltiplas estrat√©gias"""
        try:
            # Estrat√©gia 1: Tentar o rel√≥gio principal
            try:
                elemento_relogio = WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.ID, "relogio"))
                )
                texto_relogio = elemento_relogio.text
                horario = self.relogio_manager.extrair_horario_relogio(texto_relogio)
                if horario:
                    return horario
            except TimeoutException:
                pass

            # Estrat√©gia 2: Tentar outros seletores de rel√≥gio
            seletores_relogio = [
                "#relogio",
                ".relogio",
                "*[id*='relogio']",
                "*[class*='relogio']",
                "*[id*='hora']",
                "*[class*='hora']",
                "*[id*='time']",
                "span[id*='clock']",
                "div[id*='clock']"
            ]

            for seletor in seletores_relogio:
                try:
                    elemento = self.driver.find_element(By.CSS_SELECTOR, seletor)
                    texto = elemento.text
                    if texto:
                        horario = self.relogio_manager.extrair_horario_relogio(texto)
                        if horario:
                            return horario
                except NoSuchElementException:
                    continue

            # Estrat√©gia 3: Se n√£o encontrar rel√≥gio, usar hor√°rio do sistema
            logging.warning("Rel√≥gio n√£o encontrado, usando hor√°rio do sistema local")
            return datetime.now()

        except Exception as e:
            logging.error(f"Erro ao obter hor√°rio: {e}")
            return None

    def inicializar_horario_entrada(self) -> bool:
        """Inicializa o hor√°rio de entrada de forma mais robusta"""
        try:
            # Primeira tentativa: pegar do campo de entrada
            horario_entrada = self.obter_horario_ponto_entrada()

            if horario_entrada:
                self.relogio_manager.horario_entrada = horario_entrada
                self.relogio_manager.horario_saida_calculado = self.relogio_manager.calcular_horario_saida(
                    horario_entrada)

                logging.info(f"‚úÖ Hor√°rio de entrada (do ponto): {horario_entrada.strftime('%H:%M:%S')}")
                logging.info(
                    f"üïï Hor√°rio de sa√≠da calculado: {self.relogio_manager.horario_saida_calculado.strftime('%H:%M:%S')}")

                # NOVA FUNCIONALIDADE: Sair ap√≥s calcular hor√°rio de sa√≠da
                if self.config.SAIR_APOS_CALCULAR_HORARIO:
                    logging.info("üö™ Configura√ß√£o ativada: Saindo ap√≥s calcular hor√°rio de sa√≠da...")
                    logging.info("‚úã Programa ser√° encerrado em 5 segundos...")
                    time.sleep(5)
                    return False  # Retorna False para encerrar o programa

                return True

            # Segunda tentativa: usar hor√°rio atual do rel√≥gio
            horario_atual = self.obter_horario_relogio()
            if horario_atual:
                self.relogio_manager.definir_horario_entrada(horario_atual)

                # NOVA FUNCIONALIDADE: Sair ap√≥s calcular hor√°rio de sa√≠da
                if self.config.SAIR_APOS_CALCULAR_HORARIO:
                    logging.info("üö™ Configura√ß√£o ativada: Saindo ap√≥s calcular hor√°rio de sa√≠da...")
                    logging.info("‚úã Programa ser√° encerrado em 3 segundos...")
                    time.sleep(3)
                    return False  # Retorna False para encerrar o programa

                return True

            return False

        except Exception as e:
            logging.error(f"Erro ao inicializar hor√°rio de entrada: {e}")
            return False

    def encerrar_expediente(self) -> bool:
        """Encerra o expediente"""
        try:
            logging.info("\U0001F518 Tentando encerrar expediente...")

            seletores_botao = [
                "//img[@alt='Encerrar Expediente']",
                "//button[contains(text(), 'Encerrar')]",
                "//input[@value='Encerrar Expediente']",
                "//a[contains(text(), 'Encerrar')]",
                ".btn-encerrar",
                "*[alt*='Encerrar']",
                "*[title*='Encerrar']",
                "*[onclick*='encerrar']",
                "*[onclick*='Encerrar']"
            ]

            botao_encerrar = None
            for seletor in seletores_botao:
                try:
                    if seletor.startswith('//'):
                        botao_encerrar = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.XPATH, seletor))
                        )
                    else:
                        botao_encerrar = WebDriverWait(self.driver, 5).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, seletor))
                        )
                    logging.info(f"‚úÖ Bot√£o encontrado com seletor: {seletor}")
                    break
                except TimeoutException:
                    continue

            if not botao_encerrar:
                logging.error("‚ùå Bot√£o de encerrar expediente n√£o encontrado")
                self.salvar_debug_info()
                return False

            # Clica no bot√£o
            self.driver.execute_script("arguments[0].click();", botao_encerrar)
            logging.info("\U0001F518 Bot√£o 'Encerrar Expediente' clicado")

            try:
                WebDriverWait(self.driver, 10).until(EC.alert_is_present())
                alert = self.driver.switch_to.alert
                logging.info(f"Confirma√ß√£o: {alert.text}")
                alert.accept()
                logging.info("üü¢ Expediente encerrado com sucesso!")
            except TimeoutException:
                logging.info("üü¢ Expediente encerrado (sem confirma√ß√£o de alerta)")

            # Aguarda campo de sa√≠da aparecer
            campo_saida = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.ID, "sai"))
            )
            valor_saida = campo_saida.get_attribute("value")
            logging.info(f"üïî Hor√°rio de sa√≠da registrado: {valor_saida}")

            return True

        except Exception as e:
            logging.error(f"Erro ao encerrar expediente: {e}")
            self.salvar_debug_info()
            return False

    def salvar_debug_info(self):
        """Salva informa√ß√µes de debug"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            screenshot_path = f"debug_screenshot_{timestamp}.png"
            html_path = f"debug_pagina_{timestamp}.html"

            self.driver.save_screenshot(screenshot_path)
            with open(html_path, "w", encoding="utf-8") as f:
                f.write(self.driver.page_source)

            logging.info(f"üì∑ Debug salvos: {screenshot_path}, {html_path}")
        except Exception as e:
            logging.error(f"Erro ao salvar debug: {e}")

    def monitorar_relogio(self) -> bool:
        """Monitora o rel√≥gio em tempo real e fecha o ponto automaticamente"""
        logging.info("üïê Iniciando monitoramento do rel√≥gio...")

        # Aguarda um pouco para a p√°gina carregar completamente
        time.sleep(3)

        # Inicializa o hor√°rio de entrada de forma mais robusta
        if not self.inicializar_horario_entrada():
            logging.info("üö™ Encerrando programa conforme configura√ß√£o...")
            return True  # Retorna True para indicar que foi encerrado propositalmente

        contador_verificacoes = 0
        while True:
            try:
                contador_verificacoes += 1

                # Obt√©m hor√°rio atual do rel√≥gio
                horario_atual = self.obter_horario_relogio()

                if not horario_atual:
                    logging.warning("‚ö†Ô∏è N√£o foi poss√≠vel obter hor√°rio do rel√≥gio")
                    time.sleep(self.config.INTERVALO_VERIFICACAO)
                    continue

                # Verifica se pode sair
                if self.relogio_manager.verificar_se_pode_sair(horario_atual):
                    logging.info("üéâ Completou 6 horas de trabalho!")
                    return self.encerrar_expediente()

                # Calcula tempo restante
                tempo_restante = self.relogio_manager.tempo_restante(horario_atual)
                if tempo_restante:
                    tempo_formatado = self.relogio_manager.formatar_tempo_restante(tempo_restante)

                    # Log a cada 10 verifica√ß√µes para n√£o poluir muito
                    if contador_verificacoes % 10 == 0:
                        logging.info(f"üïê Hor√°rio atual: {horario_atual.strftime('%H:%M:%S')} | "
                                     f"Tempo restante: {tempo_formatado}")

                    # Log quando faltam poucos minutos
                    if tempo_restante.total_seconds() <= 300:  # 5 minutos
                        logging.info(f"‚è∞ ATEN√á√ÉO: Faltam apenas {tempo_formatado} para completar 6 horas!")

                # Aguarda pr√≥xima verifica√ß√£o
                time.sleep(self.config.INTERVALO_VERIFICACAO)

            except KeyboardInterrupt:
                logging.info("üõë Monitoramento interrompido pelo usu√°rio")
                return False
            except Exception as e:
                logging.error(f"Erro durante monitoramento: {e}")
                time.sleep(self.config.INTERVALO_VERIFICACAO)
                continue

    def executar(self) -> bool:
        """Executa o processo completo"""
        logging.info("üöÄ Iniciando sistema de ponto INSS com monitoramento inteligente...")

        try:
            with self.gerenciar_driver():
                if not self.realizar_login():
                    return False

                return self.monitorar_relogio()

        except Exception as e:
            logging.error(f"Erro geral na execu√ß√£o: {e}")
            return False
        finally:
            logging.info("üì¶ Sistema finalizado")


def main():
    """Fun√ß√£o principal"""
    configurar_logging()

    print("=" * 60)
    print("üéØ SISTEMA INTELIGENTE DE PONTO INSS - VERS√ÉO MELHORADA")
    print("=" * 60)
    print("‚ú® Funcionalidades:")
    print("   ‚Ä¢ Captura hor√°rio exato do ponto (campo 'ent')")
    print("   ‚Ä¢ Monitora o rel√≥gio em tempo real")
    print("   ‚Ä¢ Calcula automaticamente o hor√°rio de sa√≠da")
    print("   ‚Ä¢ Fecha o ponto automaticamente √†s 6 horas")
    print("   ‚Ä¢ M√∫ltiplas estrat√©gias de detec√ß√£o")
    print("   ‚Ä¢ Sistema de debug avan√ßado")
    print("   ‚Ä¢ üö™ NOVO: Sai automaticamente ap√≥s calcular hor√°rio")
    print("=" * 60)

    try:
        config = Config()
        sistema = SistemaInss(config)

        sucesso = sistema.executar()

        if sucesso:
            logging.info("‚úÖ Processo conclu√≠do com sucesso!")
        else:
            logging.error("‚ùå Processo finalizado com erros")

    except KeyboardInterrupt:
        logging.info("üõë Programa interrompido pelo usu√°rio")
    except Exception as e:
        logging.error(f"Erro fatal: {e}")
    finally:
        logging.info("üëã Programa encerrado automaticamente")
        # Remove o input() para n√£o aguardar entrada do usu√°rio


if __name__ == "__main__":
    main()